---
import { Icon } from "astro-icon/components";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

// 컴포넌트 속성 인터페이스 정의
interface Props {
  class: string; // 외부에서 전달받는 CSS 클래스명
  published: Date; // 게시글 발행일 (필수)
  updated?: Date; // 게시글 최종 수정일 (선택)
  tags: string[]; // 게시글 태그 배열
  category: string | null; // 게시글 카테고리 (null 가능)
  hideTagsForMobile?: boolean; // 모바일에서 태그 숨김 여부
  hideUpdateDate?: boolean; // 수정일 숨김 여부
}

// Astro.props에서 매개변수 구조 분해
const {
  class: className, // JS 키워드와 충돌 방지를 위한 이름 변경
  published,
  updated,
  tags,
  category,
  hideTagsForMobile = false, // 기본값: 모바일에서 태그 표시
  hideUpdateDate = false, // 기본값: 수정일 표시
} = Astro.props;

// 수정일 표시 여부 사전 계산
const shouldShowUpdated =
  !hideUpdateDate && // 수정일 숨김 설정이 없고
  updated && // 수정일이 존재하며
  updated.getTime() !== published.getTime(); // 수정일과 발행일이 다른 경우

// 태그 존재 여부 사전 계산
const hasTags = tags && tags.length > 0;

// 카테고리 존재 여부 사전 계산
const hasCategory = category && category.trim() !== "";
---

<!--
  블로그 게시글 메타데이터 컨테이너
  표시 항목: 발행일, 수정일, 카테고리, 태그
  반응형 디자인: 모바일에서 태그 숨김 가능
-->
<div
  class:list={[
    "flex flex-wrap text-neutral-500 dark:text-neutral-400",
    "items-center gap-4 gap-x-4 gap-y-2",
    className
  ]}
>
  <!-- 발행일 -->
  <div class="flex items-center">
    <div class="meta-icon">
      <!-- 달력 아이콘 -->
      <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl" />
    </div>
    <!-- 포맷된 날짜 -->
    <span class="text-50 text-sm font-medium">
      {formatDateToYYYYMMDD(published)}
    </span>
  </div>

  <!-- 수정일 (조건부 렌더링) -->
  {shouldShowUpdated && (
    <div class="flex items-center">
      <div class="meta-icon">
        {/* <!-- 편집 아이콘 --> */}
        <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl" />
      </div>
      {/* <!-- 포맷된 수정일 --> */}
      <span class="text-50 text-sm font-medium">
        {formatDateToYYYYMMDD(updated)}
      </span>
    </div>
  )}

  <!-- 게시글 카테고리 (카테고리가 있을 때만 표시) -->
  {hasCategory && (
    <div class="flex items-center">
      <div class="meta-icon">
        {/* <!-- 책 아이콘 --> */}
        <Icon name="material-symbols:book-2-outline-rounded" class="text-xl" />
      </div>
      <div class="flex flex-row flex-nowrap items-center">
        {/* <!-- 카테고리 링크 --> */}
        <a data-astro-prefetch
          href={getCategoryUrl(category)}
          aria-label={`View all posts in the ${category} category`}
          class="link-lg transition text-50 text-sm font-medium
                 hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap"
        >
          {category}
        </a>
      </div>
    </div>
  )}

  <!-- 게시글 태그 (태그가 있을 때만 표시) -->
  {hasTags && (
    <div
      class:list={[
        "items-center",
        {
          "flex": !hideTagsForMobile, // PC와 숨김 설정이 없을 때 표시
          "hidden md:flex": hideTagsForMobile // 모바일에서 숨김, 중간 화면 이상에서 표시
        }
      ]}
    >
      <div class="meta-icon">
        {/* <!-- 태그 아이콘 --> */}
        <Icon name="material-symbols:tag-rounded" class="text-xl" />
      </div>
      <div class="flex flex-row flex-nowrap items-center">
        {/* <!-- 태그 목록 렌더링 --> */}
        {tags.map((tag, index) => (
          <>
            {/* 태그 사이에 구분자 추가 (첫 번째 태그 앞에는 추가하지 않음) */}
            {index > 0 && (
              <div class="mx-1.5 text-[var(--meta-divider)] text-sm">/</div>
            )}
            {/* 개별 태그 링크 */}
            <a
              href={getTagUrl(tag)}
              aria-label={`View all posts with the ${tag.trim()} tag`}
              class="link-lg transition text-50 text-sm font-medium
                     hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap"
            >
              {tag.trim()}
            </a>
          </>
        ))}
      </div>
    </div>
  )}
</div>